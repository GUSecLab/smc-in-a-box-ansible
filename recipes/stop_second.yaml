---
- name: set shared variables
  hosts: all
  gather_facts: false
  vars:
    - exp_name: "{{ exp_name }}"

- name: stop the processes, and then transfer results
  hosts: all
  tasks:
    - set_fact: 
        ansible_ssh_common_args: '-o ConnectTimeout=60'  # Set the timeout value in seconds
    - name: killing server nodes
      command: killall cmd
      become: yes
      ignore_errors: yes

    - name: stop tcpdump
      command: killall tcpdump
      become: yes
      ignore_errors: yes

    - name: create results directory
      file:
        path: ../results/{{ exp_name }}
        state: directory
      delegate_to: localhost
      ignore_errors: yes

    - name: transfer files - pcap
      synchronize:
        src: /tmp/{{ exp_name }}.{{ ansible_facts['hostname'] }}.pcap
        dest: ../results/{{ exp_name }}
        mode: pull
      delegate_to: localhost
      ignore_errors: yes

    - name: transfer files - server_log
      synchronize:
        src: "{{ ansible_env.HOME }}/smc-in-a-box/cloud/server_log/"
        dest: ../results/{{ exp_name }}
        mode: pull
      delegate_to: localhost
      ignore_errors: yes

    - name: transfer files - client_log
      synchronize:
        src: "{{ ansible_env.HOME }}/smc-in-a-box/cloud/client_log/"
        dest: ../results/{{ exp_name }}
        mode: pull
      delegate_to: localhost
      ignore_errors: yes

    - name: transfer files - output
      synchronize:
        src: "{{ ansible_env.HOME }}/smc-in-a-box/cloud/op_log/"
        dest: ../results/{{ exp_name }}
        mode: pull
      delegate_to: localhost
      ignore_errors: yes

    - name: transfer files - output
      synchronize:
        src: "{{ ansible_env.HOME }}/smc-in-a-box/cloud/result.json"
        dest: ../results/{{ exp_name }}
        mode: pull
      delegate_to: localhost
      ignore_errors: yes

    - name: delete files
      command: rm -rf /tmp/{{ exp_name }}.{{ ansible_facts['hostname'] }}.pcap server_config server_input server_log client_log client_config client_input op_log op_config op_input result.json stdout.log
      become: yes
      args:
        chdir: "{{ ansible_env.HOME }}/smc-in-a-box/cloud"
      ignore_errors: yes

- name: drop MySQL database
  hosts:
    - server
    - output
  become: yes  
  tags: 
    - dbdrop
  tasks:
    - name: Drop the database
      mysql_db:
        name: "smc"
        state: absent
        login_user: "smc"
        login_password: "smcinabox"
    - name: Disable MySQL service
      systemd:
        name: mysql
        enabled: no
        state: stopped