---
- name: set shared variables
  hosts: all
  gather_facts: false
  vars:
    - exp_name: "{{ exp_name }}"

- name: kick off tcpdump
  hosts: all
  gather_facts: true
  tasks:
    - name: start tcpdump on all hosts
      become: yes
      command: /usr/bin/tcpdump -s 100 -w /tmp/{{ exp_name }}.{{ ansible_facts['hostname'] }}.pcap
      async: 900 # in seconds
      poll: 0 # This detaches the task and makes it run in the background

- name: run the server processes, and then transfer results
  hosts: server
  tags: test
  tasks:
    - name: starting server nodes
      command:
        cmd: ./cloud -party="server" -sid={{ server_id }} -n_server=4 -n_clients=5 -template_path=./template/4s_10input/ -start="2024-04-24 15:04:05 +0000 UTC" -d0=3 -d1=2 -d2=5 -d3=8
        async: 900
        poll: 0
      become: yes
      register: command_output
      args:
        chdir: "{{ ansible_env.HOME }}/smc-in-a-box/cloud"

    - name: Check on the long running command every 30s, fail if timeout reached
      command:
        cmd: "kill -9 {{ command_output.ansible_job_id }}"
      async_status: 
        jid: "{{ command_output.ansible_job_id }}"
        # Check on it every 30 seconds
        poll: 30 
      loop: "{{ range(0, 30)|list }}" # 900 seconds = 30 * 30
      when: command_output.finished != 1
      ignore_errors: yes

    - name: create results directory
      file:
        path: ../results/{{ exp_name }}
        state: directory
      delegate_to: localhost

    - name: transfer files - pcap
      synchronize:
        src: /tmp/{{ exp_name }}.{{ ansible_facts['hostname'] }}.pcap
        dest: ../results/{{ exp_name }}
        mode: pull
      delegate_to: localhost

    - name: transfer files - server_log
      synchronize:
        src: "{{ ansible_env.HOME }}/smc-in-a-box/cloud/server_log/"
        dest: ../results/{{ exp_name }}
        mode: pull
      delegate_to: localhost
